<html>
	<head>
		 <meta charset="UTF-8">
		<title>
			PythonWordTree
		</title>
			<style>
		a{text-decoration:none}
		a:hover{color:blue,text-decoration:none}
		a:visited{color:black,text-decoration:none}
		a:link{color:black,text-decoration:none}
		a:active{color:black,text-decoration:none}
	</style>
	</head>
	<body>

	<img src="static/pic/python.jpg">
	Python Libs Dependency Graph<br>
	<a href="/">Python3.6</a>|<a href="/network?wanted={{jfile}}">network</a>|<a href="/tree?wanted={{jfile}}">filetree</a>|<a href="/leetree?wanted={{jfile}}">bitree</a>|<a href="/hicircle?wanted={{jfile}}">cluster</a>|<a href="/matrix?wanted={{jfile}}">matrix</a>|<a href="/bubble?wanted={{jfile}}">bubble</a>|
	<a href="/wordcloud?wanted={{jfile}}">wordcloud</a>|
	Length: <input style="position:relative;top:3px;" type="range" id="scale" min="30" max="1000" value="200">
	Angle: <input style="position:relative;top:3px;" type="range" id="angle" min="Math.PI" max="Math.PI*2" value="0">
	<input type="checkbox" name="label" value="showOn" id="showLabel" checked onclick="javascript:selectit()">Label</input>
	<script src="static/d3.v7.min.js"></script>
	<div>
		<button onclick="downloadPhoto()">下载svg</button>
		  <button onclick="downloadPhoto('png')">下载png</button>
	</div>
	
	<div id="svgbox"></div>
	<div id="svgdataurl" style="display: none;"></div>
	<canvas style="display:none"></canvas>
	<script>
		function downloadPhoto(form = "svg") {
			// 导出最基础的svg
			var html = d3.select("svg")
						.attr("version", 1.1)
						.attr("xmlns", "http://www.w3.org/2000/svg")
						.attr("id", "svgdemo")
						.node().parentNode.innerHTML;
			console.log(html);
			var imgsrc = 'data:image/svg+xml;base64,' + window.btoa(unescape(encodeURIComponent(html)));
			// 从 String 对象中创建一个 base-64 编码的 ASCII 字符串，其中字符串中的每个字符都被视为一个二进制数据字节。
			console.log(imgsrc);
			var image = new Image;
			image.src = imgsrc;
			if (form === "png") {
					var svg = d3.select("#svgbox").node()
					var img = '<img src="' + imgsrc + '">';
					d3.select("#svgdataurl").html(img);
					var boxWidth = svg.offsetWidth
					var boxHeight = svg.offsetHeight
					var canvas = document.querySelector("canvas");
					var context = canvas.getContext("2d");
					canvas.height = boxHeight; //canvas高度变化时清空画布
					canvas.width = boxWidth;
					image.onload = function () {
						context.drawImage(image, 0, 0);
						var canvasdata = canvas.toDataURL("image/png");
						var pngimg = '<img src="' + canvasdata + '">';
						d3.select("#pngdataurl").html(pngimg);
						var photo = document.createElement("a");
						photo.download = "直方图.png";
						photo.href = canvasdata;
						document.body.appendChild(photo);
						photo.click();
					}
			}else{
					console.log(form);
					image.onload = function (){
						var photo = document.createElement("a");
						photo.download = "直方图.svg";
						photo.href = imgsrc;
						document.body.appendChild(photo);
						photo.click();
					}
			}
			};

		var width=(window.innerWidth|| document.documentElement.clientWidth|| document.body.clientWidth)*0.96;
		var height=(window.innerHeight|| document.documentElement.clientHeight|| document.body.clientHeight)*0.85;
		var color = d3.schemeCategory10;
		var svg = d3.select("#svgbox")
				.append("svg")
				.attr("width", width)
				.attr("height", height);
		var colorrec=svg.selectAll('rect')
						.data(color)
						.enter()
						.append("rect")
						.attr("x",(d,i)=>(i*16+width*0.55))
						.attr("y",30)
						.attr("width",14)
						.attr("height",14)
						.attr("fill",(d,i)=>color[i])
						.attr("opacity",0.7);


		//d3.json("json/numpy-1-19-0.json").then(function(dataraw) {
		d3.json("static/treejson/{{jsonfile}}").then(function(dataraw) {
				//console.log(dataraw);
				var data=d3.hierarchy(dataraw)
							.sort((a, b) => d3.ascending(a.data.depth, b.data.depth));
							//.sort((a, b) => b.value - a.value);
				console.log(data);
				console.log(data.children.length);

				var info=svg.append("text")
					.attr("x",width*0.1)
					.attr("y",20)
					.attr("font-size","20px")
					.attr("font-weight","bold")
					.attr("fill",color[2])
					.text("Nodes="+data.children.length);

				var length=100;
				var rate=0.6;
				var x0=width/2;
				var y0=height;
				var id=0;  //children count
				var angle=Math.PI;
				var labelchange=1;

				d3.select("input[id=scale]").on("change", function() {
					length=this.value; 
					d3.selectAll("line").remove();
					d3.selectAll("text").remove();
					d3.selectAll("circle").remove();
					id=0;
					show(data,x0,y0,length,rate,-Math.PI/2,data.children.length);
					d3.selectAll("text")
					.attr("fill","black");
				});
				d3.select("input[id=angle]").on("change", function() {
					angle=this.value;
					d3.selectAll("line").remove();
					d3.selectAll("text").remove();
					d3.selectAll("circle").remove();
					id=0;
					show(data,x0,y0,length,rate,-Math.PI/2,data.children.length);
					d3.selectAll("text")
					.attr("fill","black");
				});
				d3.select("input[id=showLabel]").on("change", function() {                   
					d3.selectAll("text")
					.attr("opacity",d=>labelchange==0?1:0);
					if (labelchange==0)  
					labelchange=1;
					else
					labelchange=0;
				});
				function show(data,x0,y0,length,rate,a,count){
				//console.log(data);
				//console.log(count);
				id++;
				var x1=x0;
				var y1=y0;
				var x2=x1+length*Math.cos(a);
				var y2=y1+length*Math.sin(a);
				svg.append("line")
					.attr("x1",x1)
					.attr("y1",y1)
					.attr("x2",x2)
					.attr("y2",y2)
					.attr("id","line"	+id)
					.attr("stroke",color[data.depth])
					.attr("stroke-width",data.height*2+1)
					.attr("opacity",0.7);
					/*
					.on("mouseover",function(d){
						d3.select(this)
							.attr("stroke-width",data.height*2+1);
					})
					.on("mouseout",function(d){
						d3.select(this)
							.attr("stroke-width",data.height+1);
					});*/

				svg.append("circle")
					.attr("cx",x2)
					.attr("cy",y2)
					.attr("r",d=>count>0?0:(Math.log(data.data.value+1)/2+1))
					.attr("fill",color[data.depth])
					.attr("stroke","white")
					.attr("opacity",0.7);


				svg.append("text")
					.attr("x",x2+20)
					.attr("y",y2+20)
					.attr("id","text"+id)
					.attr("stroke-family","仿宋")
					.attr("font-size","20px")
					.attr("font-weight","bold")
					.attr("fill",color[data.depth])
					.attr("opacity",d=>count>0?1:0)
					// .text(d=>(count>-1)&&((id%3==1)||(id>400))?data.data.name+"-"+id:"");
					.text(d=>(count>-1)&&((id%43==1))?data.data.name+"-"+id:"");

				if (count>0)
				{
					for(var i=0;i<count;i++){
						data=data.children[i];
						//console.log(data.data.name,data.data.children);
						//var a=Math.PI*i/(count)+angle*Math.PI/180;
						//var a=angle*i/(count)-Math.PI+angle*Math.random()/count;   Great
						var a=Math.PI*i/(count)-Math.PI+Math.PI*Math.random()/count;
						//console.log(count,i,data);
						if (data.height>0)    //no children
						{
							var subcount=data.children.length;
							rate=0.6;
							show(data,x2,y2,length*rate*(data.height/2+Math.random()*0.3+0.3),rate,a,subcount);
							data=data.parent;
						}
						else{        //has children
							//console.log(count,i,data,data.data.name);
							rate=0.3;
							show(data,x2,y2,length*rate,rate,a,0);
							data=data.parent;
						}

					}
				}
				else{
						//console.log(data);
						data=data.parent;
						//show(data,x2,y2,length*rate,rate,a,data.children.length);
						//console.log(data);
				}
				}


			show(data,x0,y0,length,rate,-Math.PI/2,data.children.length);
		
		})
		d3.selectAll("text")
			.attr("fill","yellow")
			.attr("font-size","30px");
	</script>
	</body>
</html>