<html>
<head>
    	<meta charset="utf-8">
    	<style>
		a{text-decoration:none}
		a:hover{color:blue,text-decoration:none}
		a:visited{color:black,text-decoration:none}
		a:link{color:black,text-decoration:none}
		a:active{color:black,text-decoration:none}
	</style>
  <style>

	.node circle {
	  stroke: white;
	  stroke-width: 1px;
	}

	.node {
	  font: 12px sans-serif;
	}

	.link {
	  fill: none;
	  stroke: #555;
	  stroke-width: 0.5px;
	}

  </style>
</head>
<body>
Python Libs Dependency Graph<br>
<a href="/">Python3.6</a>|<a href="/network?wanted={{jfile}}">network</a>|<a href="/tree?wanted={{jfile}}">filetree</a>|<a href="/leetree?wanted={{jfile}}">bitree</a>|<a href="/hicircle?wanted={{jfile}}">cluster</a>|<a href="/matrix?wanted={{jfile}}">matrix</a>|<a href="/bubble?wanted={{jfile}}">bubble</a>|
<a href="/wordcloud?wanted={{jfile}}">wordcloud</a>|
<script src="static/d3.v7.min.js"></script>
<script>
		    var width=(window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth)*0.96;
		    var height=(window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight)*0.98;
            var color = d3.schemeCategory10;
            var svg = d3.select("body")
					.append("svg")
					.attr("width", width)
					.attr("height", height);

			var colorrec=svg.selectAll('rect')
                            .data(color)
                            .enter()
                            .append("rect")
                            .attr("x",(d,i)=>(i*16+width*0.65))
                            .attr("y",20)
                            .attr("width",14)
                            .attr("height",14)
                            .attr("fill",(d,i)=>color[i])
                            .attr("opacity",0.7);

            radius = width /4.8
            var tree= d3.cluster().size([2*Math.PI, radius - 100]);
            d3.json("static/treejson/{{jsonfile}}").then(function(data) {
                console.log(data);
                //var root=tree(d3.hierarchy(data).sort((a, b) => d3.ascending(a.data.name, b.data.name)));
                var root=tree(d3.hierarchy(data));
                console.log(root);
                links=root.links();
                console.log(links);
                nodes=root.descendants()
                console.log(nodes);

                svg.append("g")
                      .attr("fill", "none")
                      .attr("stroke", "#555")
                      .attr("stroke-width", 0.5)
                    .selectAll("path")
                    .data(links)
                    .join("path")
                    .attr("d", d3.linkRadial()
                      .angle(d => d.x)
                      .radius(d => d.y));

                svg.append("g")
                   .selectAll("circle")
                   .data(nodes)
                   .join("circle")
                   .attr("transform", d => `
                    rotate(${d.x * 180 / Math.PI - 90})
                    translate(${d.y},0)
                  `)
                  .attr("fill",d=>color[d.depth])
                  .attr("r", d=>(d.height*3+3))
                  .attr("opacity",0.7);

                  svg.append("g")
				  	    .attr("font-family", "Consolas")
					    .attr("stroke-width", 0)
                     .selectAll("text")
                     .data(root.descendants())
                     .join("text")
                     .attr("stroke-family","仿宋")
                     .attr("font-size", d=>d.height*2+18)
                     .attr("font-weight","bold")
                     .attr("transform", d => `
						rotate(${d.x * 180 / Math.PI - 90})
						translate(${d.y},0)
						rotate(${d.x >= Math.PI ? 180 : 0})
					  `)
                     .attr("dy", "0.31em")
                     .attr("x", d => d.x < Math.PI === !d.children ? 6 : -6)
                     .attr("text-anchor", d => d.x < Math.PI === !d.children ? "start" : "end")
                    // .attr("fill", d=>color[d.depth])
                     .attr("opacity",0.7)
                     .attr("stroke", d=>color[d.depth])
                     .text((d,i) =>((d.deep<3)||(i%5==0))?d.data.name:"")
                     .clone(true).lower();

                  svg.selectAll("g")
                   .attr("transform", "translate(" + (width/2) + "," + (height/2) + ")");
            })
</script>
</body>
</html>